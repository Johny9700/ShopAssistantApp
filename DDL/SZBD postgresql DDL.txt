DROP TABLE IF EXISTS dowody_sprzedazy CASCADE;
DROP TABLE IF EXISTS firmy CASCADE;
DROP TABLE IF EXISTS kategorie CASCADE;
DROP TABLE IF EXISTS klienci CASCADE;
DROP TABLE IF EXISTS pozycje CASCADE;
DROP TABLE IF EXISTS produkty CASCADE;
DROP TABLE IF EXISTS sklepy CASCADE;
DROP TABLE IF EXISTS sprzedane_produkty CASCADE;
DROP TABLE IF EXISTS sprzedawcy CASCADE;
DROP TABLE IF EXISTS stan_magazynowy CASCADE;
DROP TABLE IF EXISTS zamowienia CASCADE;

CREATE TABLE dowody_sprzedazy (
    id_dowodu_sprzedazy   INTEGER NOT NULL,
    kwota                 NUMERIC(6,2) NOT NULL,
    data                  DATE NOT NULL,
    id_klienta            INTEGER,
    id_sprzedawcy         INTEGER NOT NULL,
    nr_paragonu           INTEGER,
    nr_faktury            INTEGER,
    nip                   INTEGER,
    adres                 TEXT
);

ALTER TABLE dowody_sprzedazy ADD CONSTRAINT dowody_sprzedazy_pk PRIMARY KEY ( id_dowodu_sprzedazy );

CREATE TABLE firmy (
    nip     INTEGER NOT NULL,
    nazwa   TEXT NOT NULL,
    adres   TEXT
);

ALTER TABLE firmy ADD CONSTRAINT firmy_pk PRIMARY KEY ( nip );

CREATE TABLE kategorie (
    nazwa   TEXT NOT NULL
);

ALTER TABLE kategorie ADD CONSTRAINT kategorie_pk PRIMARY KEY ( nazwa );

CREATE TABLE klienci (
    id_klienta   INTEGER NOT NULL,
    imię         TEXT NOT NULL,
    nazwisko     TEXT NOT NULL,
    email        TEXT
);

ALTER TABLE klienci ADD CONSTRAINT klienci_pk PRIMARY KEY ( id_klienta );

CREATE TABLE pozycje (
    ilosc           INTEGER NOT NULL,
    id_zamowienia   INTEGER NOT NULL,
    id_produktu     INTEGER NOT NULL
);

ALTER TABLE pozycje ADD CONSTRAINT pozycje_pk PRIMARY KEY ( id_zamowienia,
                                                            id_produktu );

CREATE TABLE produkty (
    id_produktu       INTEGER NOT NULL,
    cena              NUMERIC(6,2) NOT NULL,
    nazwa             TEXT NOT NULL,
    kategorie_nazwa   TEXT NOT NULL,
    nip               INTEGER NOT NULL,
    w_ofercie         TEXT NOT NULL
);

ALTER TABLE produkty ADD CONSTRAINT produkty_pk PRIMARY KEY ( id_produktu );

CREATE TABLE sklepy (
    id_sklepu   INTEGER NOT NULL,
    adres       TEXT
);

ALTER TABLE sklepy ADD CONSTRAINT sklepy_pk PRIMARY KEY ( id_sklepu );

CREATE TABLE sprzedane_produkty (
    ilosc                 INTEGER NOT NULL,
    id_dowodu_sprzedazy   INTEGER NOT NULL,
    id_produktu           INTEGER NOT NULL
);

ALTER TABLE sprzedane_produkty ADD CONSTRAINT sprzedane_produkty_pk PRIMARY KEY ( id_produktu,
                                                                                  id_dowodu_sprzedazy );

CREATE TABLE sprzedawcy (
    id_sprzedawcy   INTEGER NOT NULL,
    imie            TEXT NOT NULL,
    nazwisko        TEXT NOT NULL,
    nr_telefonu     INTEGER,
    id_sklepu       INTEGER NOT NULL,
    widoczny        TEXT NOT NULL
);

ALTER TABLE sprzedawcy ADD CONSTRAINT sprzedawcy_pk PRIMARY KEY ( id_sprzedawcy );

CREATE TABLE stan_magazynowy (
    ilosc         INTEGER NOT NULL,
    id_produktu   INTEGER NOT NULL,
    id_sklepu     INTEGER NOT NULL
);

ALTER TABLE stan_magazynowy ADD CONSTRAINT stan_magazynowy_pk PRIMARY KEY ( id_produktu,
                                                                            id_sklepu );

CREATE TABLE zamowienia (
    id_zamowienia   INTEGER NOT NULL,
    data            DATE NOT NULL,
    id_sklepu       INTEGER NOT NULL,
    nip             INTEGER NOT NULL
);

ALTER TABLE zamowienia ADD CONSTRAINT zamowienia_pk PRIMARY KEY ( id_zamowienia );

ALTER TABLE dowody_sprzedazy
    ADD CONSTRAINT dowody_sprzedazy_klienci_fk FOREIGN KEY ( id_klienta )
        REFERENCES klienci ( id_klienta );

ALTER TABLE dowody_sprzedazy
    ADD CONSTRAINT dowody_sprzedazy_sprzedawcy_fk FOREIGN KEY ( id_sprzedawcy )
        REFERENCES sprzedawcy ( id_sprzedawcy );

ALTER TABLE pozycje
    ADD CONSTRAINT pozycje_produkty_fk FOREIGN KEY ( id_produktu )
        REFERENCES produkty ( id_produktu );

ALTER TABLE pozycje
    ADD CONSTRAINT pozycje_zamowienia_fk FOREIGN KEY ( id_zamowienia )
        REFERENCES zamowienia ( id_zamowienia );

ALTER TABLE sprzedane_produkty
    ADD CONSTRAINT produkty_dowody_sprzedazy_fk FOREIGN KEY ( id_dowodu_sprzedazy )
        REFERENCES dowody_sprzedazy ( id_dowodu_sprzedazy );

ALTER TABLE produkty
    ADD CONSTRAINT produkty_firmy_fk FOREIGN KEY ( nip )
        REFERENCES firmy ( nip );

ALTER TABLE produkty
    ADD CONSTRAINT produkty_kategorie_fk FOREIGN KEY ( kategorie_nazwa )
        REFERENCES kategorie ( nazwa );

ALTER TABLE sprzedane_produkty
    ADD CONSTRAINT sprzedane_produkty_produkty_fk FOREIGN KEY ( id_produktu )
        REFERENCES produkty ( id_produktu );

ALTER TABLE sprzedawcy
    ADD CONSTRAINT sprzedawcy_sklepy_fk FOREIGN KEY ( id_sklepu )
        REFERENCES sklepy ( id_sklepu );

ALTER TABLE stan_magazynowy
    ADD CONSTRAINT stan_magazynowy_produkty_fk FOREIGN KEY ( id_produktu )
        REFERENCES produkty ( id_produktu );

ALTER TABLE stan_magazynowy
    ADD CONSTRAINT stan_magazynowy_sklepy_fk FOREIGN KEY ( id_sklepu )
        REFERENCES sklepy ( id_sklepu );

ALTER TABLE zamowienia
    ADD CONSTRAINT zamowienia_firmy_fk FOREIGN KEY ( nip )
        REFERENCES firmy ( nip );

ALTER TABLE zamowienia
    ADD CONSTRAINT zamowienia_sklepy_fk FOREIGN KEY ( id_sklepu )
        REFERENCES sklepy ( id_sklepu );
        
        
DROP SEQUENCE IF EXISTS dowody_sprzedarzy_seq CASCADE;
DROP SEQUENCE IF EXISTS klienci_seq CASCADE;
DROP SEQUENCE IF EXISTS produkty_seq CASCADE;
DROP SEQUENCE IF EXISTS sklepy_seq CASCADE;
DROP SEQUENCE IF EXISTS sprzedawcy_seq CASCADE;
DROP SEQUENCE IF EXISTS zamowienia_seq CASCADE;

DROP TRIGGER IF EXISTS dowody_sprzedarzy_trig ON dowody_sprzedazy;
DROP TRIGGER IF EXISTS klienci_trig ON klienci;
DROP TRIGGER IF EXISTS produkty_trig ON produkty;
DROP TRIGGER IF EXISTS sklepy_trig ON sklepy;
DROP TRIGGER IF EXISTS sprzedawcy_trig ON sprzedawcy;
DROP TRIGGER IF EXISTS zamowienia_trig ON zamowienia;


---------------------------
CREATE SEQUENCE dowody_sprzedarzy_seq START WITH 1;

CREATE OR REPLACE FUNCTION dowody_sprzedarzy_func() RETURNS TRIGGER AS
    $BODY$
    BEGIN
        NEW.id_dowodu_sprzedazy := nextval('dowody_sprzedarzy_seq');
        Return NEW;
    END;
    $BODY$
LANGUAGE plpgsql VOLATILE;

CREATE TRIGGER dowody_sprzedarzy_trig BEFORE
    INSERT ON dowody_sprzedazy
    FOR EACH ROW
    EXECUTE PROCEDURE dowody_sprzedarzy_func();
---------------------------
CREATE SEQUENCE klienci_seq START WITH 1;

CREATE OR REPLACE FUNCTION klienci_func() RETURNS TRIGGER AS
    $BODY$
    BEGIN
        NEW.id_klienta := nextval('klienci_seq');
        Return NEW;
    END;
    $BODY$
LANGUAGE plpgsql VOLATILE;

CREATE TRIGGER klienci_trig
    BEFORE INSERT
    ON klienci
    FOR EACH ROW
    EXECUTE PROCEDURE klienci_func();
---------------------------
CREATE SEQUENCE produkty_seq START WITH 1;

CREATE OR REPLACE FUNCTION produkty_func() RETURNS TRIGGER AS
    $BODY$
    BEGIN
        NEW.id_produktu := nextval('produkty_seq');
        Return NEW;
    END;
    $BODY$
LANGUAGE plpgsql VOLATILE;

CREATE TRIGGER produkty_trig
    BEFORE INSERT
    ON produkty
    FOR EACH ROW
    EXECUTE PROCEDURE produkty_func();
---------------------------
CREATE SEQUENCE sklepy_seq START WITH 1;

CREATE OR REPLACE FUNCTION sklepy_func() RETURNS TRIGGER AS
    $BODY$
    BEGIN
        NEW.id_sklepu := nextval('sklepy_seq');
        Return NEW;
    END;
    $BODY$
LANGUAGE plpgsql VOLATILE;

CREATE TRIGGER sklepy_trig
    BEFORE INSERT
    ON sklepy
    FOR EACH ROW
    EXECUTE PROCEDURE sklepy_func();
---------------------------
CREATE SEQUENCE sprzedawcy_seq START WITH 1;

CREATE OR REPLACE FUNCTION sprzedawcy_func() RETURNS TRIGGER AS
    $BODY$
    BEGIN
        NEW.id_sprzedawcy := nextval('sprzedawcy_seq');
        Return NEW;
    END;
    $BODY$
LANGUAGE plpgsql VOLATILE;

CREATE TRIGGER sprzedawcy_trig
    BEFORE INSERT
    ON sprzedawcy
    FOR EACH ROW
    EXECUTE PROCEDURE sprzedawcy_func();
---------------------------
CREATE SEQUENCE zamowienia_seq START WITH 1;

CREATE OR REPLACE FUNCTION zamowienia_func() RETURNS TRIGGER AS
    $BODY$
    BEGIN
        NEW.id_zamowienia := nextval('zamowienia_seq');
        Return NEW;
    END;
    $BODY$
LANGUAGE plpgsql VOLATILE;

CREATE TRIGGER zamowienia_trig
    BEFORE INSERT
    ON zamowienia
    FOR EACH ROW
    EXECUTE PROCEDURE zamowienia_func();
---------------------------
